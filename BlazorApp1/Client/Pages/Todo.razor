@page "/todo"
@inject HttpClient client
@inject IJSRuntime js

<h3>Todo Lists</h3>
<small>Add as many To do as you wish.</small>


@if (todos == null)
{
    <text>Loading...</text>
}

else
{


    <SortableTable Todos="todos"
                   SortColumn="@sortColumn"
                   SortDirection="@sortDirection"
                   AddTodoCallback="AddTodoHandler"
                   DeleteTodoCallback="DeleteTodoHandler"
                   ToggleCompletionCallback="ToggleCompletionHandler"
                   ColumnHeaders="@customColumnHeaders">
    </SortableTable>

}
@if (!showAddTodo)
{
    <div class="text-right">
        <button class="btn btn-success" @onclick="ShowAddTodoForm" style="background-color: #46a546; border-color: #46a546;">
            Add todo
        </button>
    </div>
}
else
{
    <AddTodoForm OnAddTodo="AddTodoHandler" OnFormSubmitted="HideAddTodoForm" />
}

@code {
    TodoItem[] todos { get; set; }
    string sortColumn = "";
    string sortDirection = "ascending"; 

    bool showAddTodo = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        todos = await client.GetFromJsonAsync<TodoItem[]>("api/TodoItem");
    }
    private async Task AddTodoHandler((string title, string description) todo)
    {
        var todoItem = new TodoItem { Title = todo.title, Description = todo.description, IsDone = false, AddedTime = DateTime.Now };
        await client.PostAsJsonAsync("api/TodoItem", todoItem);
        await RefreshData();
        StateHasChanged();
    }

    private async Task DeleteTodoHandler(int todoId)
    {
        if (await js.InvokeAsync<bool>("confirm", "Do you want to delete the selected task?"))
        {
            await client.DeleteAsync($"api/TodoItem/{todoId}");
            await RefreshData();
            StateHasChanged();
        }
    }

    private async Task ToggleCompletionHandler(TodoItem item)
    {
        item.IsDone = !item.IsDone;
        if (item.IsDone)
        {
            item.CompletionTime = DateTime.Now;
        }
        else
        {
            item.CompletionTime = null;
        }
        await client.PutAsJsonAsync($"api/TodoItem/{item.Id}", item);
        await RefreshData();
        StateHasChanged();
    }
    private void ShowAddTodoForm()
    {
        showAddTodo = true;
    }

    private void HideAddTodoForm()
    {
        showAddTodo = false;
    }
    string[] customColumnHeaders = new string[] { "Title", "Description", "Is Done", "Added Time", "Completion Time", "" };

}